# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IbTPQye8cvUbUF1TH4LDx3Z3i1lhPbtx
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets

#读取数据
from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
# Reading CSV file

path="/content/drive/MyDrive/ML/Coating_Data_Set .csv"
# Using CSV instruction to read a txt file
# Reading Excel file
df_xls = pd.read_excel("/content/drive/MyDrive/ML/Coating_Data_Set.xlsx")


import numpy as np
df_array=np.array(df_xls)
X=X_data=df_array[:,0:3]
X_data

Y=Y_target=df_array[:,3]
Y_target

# Split data for training and testing
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.20)

from sklearn.svm import SVR
svclassifier = SVR(kernel='linear')
svclassifier.fit(X_train, Y_train)

from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

def validate(**kwarg):
    model = SVR(**kwarg)
    model.fit(X_train,Y_train)
    predictions = model.predict(X_train)
    rmse = round(np.sqrt(mean_squared_error(Y_train, predictions)), 3)
    r2 = round(r2_score(Y_train, predictions), 3)
    return [rmse, r2]

from hyperopt import fmin, tpe, hp, STATUS_OK, Trials

trials = Trials()

space4svm = {
    'C': hp.uniform('C', 0, 5),
    'gamma': hp.uniform('gamma', 0, 5),
    'epsilon': hp.uniform('epsilon', 0, 20)
}

def f(params):
    rmse = validate(**params)
    return {'loss': rmse[0], 'status': STATUS_OK}

best = fmin(fn=f, space=space4svm, algo=tpe.suggest, max_evals=1000, trials=trials)

models = SVR(**best).fit(X_train, Y_train)
y_pred = models.predict(X_test)

r2 = r2_score(Y_test, y_pred)

print(best)
print(validate(**best))
y_pred

model.predict(X_train)

from sklearn.metrics import mean_squared_error, r2_score
MSE=(mean_squared_error(Y_train, model.predict(X_train)))
R2=(r2_score(Y_train, model.predict(X_train)))
RMSE=(np.sqrt(MSE))
print(MSE,R2,RMSE)

"""# 新段落"""

plt.scatter(model.predict(X_train), Y_train)
rmse = round(np.sqrt(mean_squared_error(Y_train, model.predict(X_train))), 3)

print(MSE)
print(RMSE)
print(R2)
plt.plot(model.predict(X_train), Y_train,'g-')
plt.title("Prediction of the Yield Strength for Training")
plt.xlabel("Output model")
plt.ylabel("Desired Prediction (Target)")
plt.show()