# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1isRe6i9zn-QPhyUBl5vRTiCp12trDM7Q
"""

# Import Libraries
from google.colab import files
# To allow access to read google drive
from google.colab import drive
drive.mount('/content/drive')

from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
# Reading CSV file

path="/content/drive/MyDrive/ML/Coating_Data_Set .csv"
# Using CSV instruction to read a txt file
# Reading Excel file
df_xls = pd.read_excel("/content/drive/MyDrive/ML/Coating_Data_Set.xlsx")

import numpy as np

df_array=np.array(df_xls)

# Converting Input Data
x=X_unnormalized =  df_array[:,0:3]
print(X_unnormalized.shape)

# Converting Y from MATLAB format to NUMPY format and rename it to Y_targets
T = Y_targets =  df_array[:,3] # Select the target Y and pass it onto the variable called Y_targets

print(Y_targets.shape)

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from math import sqrt

Y_test_true=T

from sklearn import datasets
from sklearn import preprocessing
x_MinMax = preprocessing.MinMaxScaler()
y_MinMax = preprocessing.MinMaxScaler()

import numpy as np
y = T = np.array(T).reshape(len(T),1)
x = x_MinMax.fit_transform(x)
y = y_MinMax.fit_transform(y)

# Split data for training and testing
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20)

from sklearn.neural_network import MLPRegressor
fit1 = MLPRegressor(
        hidden_layer_sizes = (100,50,10,5),
        activation = 'relu',solver = 'adam',
        alpha = 0.01, max_iter= 200
)



print("fitting model right now")
fit1.fit(x_train, y_train)
pred1_train = fit1.predict(x_train)

pred1_train

from sklearn.metrics import mean_squared_error
mse_1 = mean_squared_error(pred1_train, y_train)
print("Train ERROR = ", mse_1)
pred1_test = fit1.predict(x_test)

pred1_test

pred2_test = [pred1_test]
Y_test_pred = y_MinMax.inverse_transform(pred2_test)
Y_test_pred = Y_test_pred[0]

y_train

mse_2 = mean_squared_error(pred1_test, y_test)
rmse = sqrt(mean_squared_error(Y_test_pred, y_test))

def MAPE (true,pred):
  diff = np.abs(np.array(y_test) - np.array(Y_test_pred))
  return np.mean(diff/Y_test_true)

error = []
for i in range(len(y_test)):
  error.append(y_test[i]-Y_test_pred[i])
  squaredError = []
  absError= []
  for val in error:
    squaredError.append(val*val)
    absError.append(abs(val))

    n=len(Y_test_pred)

from sklearn import metrics
RMSE = metrics.mean_squared_error(Y_test_pred, y_test)**0.5

print("Test ERROR =", mse_2)
print('Test RMSE: %.3f'% rmse)

print('----------huiquan-------mlr----------')
from sklearn import metrics
r2 = r2_score(Y_test_pred,y_test)
print("R2=",-r2)
print("MSE=",mean_squared_error(Y_test_pred,y_test))
print("MAE=",mean_absolute_error(Y_test_pred,y_test))
print("RMSE=",RMSE)

import matplotlib.pyplot as plt
xx = range(0,len(y_test))
plt.figure(figsize=(12,6))
plt.scatter(xx,y_test,color="red",label="sample point",linewidth=3)
plt.plot(xx,pred1_test,color="blue",label="Fitting Line", linewidth=2)
plt.legend()
plt.show()

t = np.arange(len(y_test))
plt.figure(figsize=(18,6))
plt.plot(t,y_test,"rs-",linewidth=1,label='Test(label)')
plt.plot(t,Y_test_pred,'go-',linewidth=1,label='Predict')
plt.legend()
plt.show()